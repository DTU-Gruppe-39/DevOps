{"version":3,"sources":["logo.svg","stores/GiraffeStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GiraffeStore","giraffes","decorate","observable","giraffeStore","observer","className","src","logo","alt","href","target","rel","placeholder","aria-label","aria-describedby","variant","Switch","path","component","About","exact","render","map","giraffeName","key","onClick","push","withRouter","history","match","console","log","params","text","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,kRCEtBC,E,sCACjBC,SAAW,CAAC,UAAW,WAG3BC,YAASF,EAAc,CACnBC,SAAUE,M,YCKRC,EAAe,IAAIJ,EA+CVK,mBA7Cf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,6BAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,yBAAKN,UAAU,kCACf,kBAAC,IAAD,CAAYA,UAAU,QACpB,kBAAC,IAAD,CACIO,YAAY,uBACZC,aAAW,uBACXC,mBAAiB,kBAGvB,kBAAC,IAAD,CAAQT,UAAU,OAAOU,QAAQ,WAAjC,YAEA,4CACA,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAOC,KAAM,eAAgBC,UAAWC,IACxC,kBAAC,IAAD,CAAOC,OAAK,EAACH,KAAO,IAAKI,OAAS,kBAAM,mDACxC,kBAAC,IAAD,CAAOA,OAAQ,kBAAI,uCAGnB,gEAGF,4BACGlB,EAAaH,SAASsB,KAAI,SAACC,EAAaC,GAAd,OAC3B,wBAAIA,IAAKA,GAAMD,OAEjB,kBAAC,IAAD,CAAQR,QAAQ,UAAUU,QAAS,kBAAItB,EAAaH,SAAS0B,KAAK,YAAlE,wBAMFP,EAAQQ,aAAW,YAAoB,IAAlBC,EAAiB,EAAjBA,QAAQC,EAAS,EAATA,MAGjC,OAFAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACL,6BAAK,qCAAWA,EAAMG,OAAOC,MAClC,kBAAC,IAAD,CAAQR,QAAS,kBAAIG,EAAQF,KAAK,OAAlC,mBCpDgBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2D,YCVNS,IAASjB,OAAO,kBAAC,IAAD,SAAa,kBAAC,EAAD,MAAb,KAAoCkB,SAASC,eAAe,SDyHtE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.05dac3c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {decorate, observable} from \"mobx\";\n\nexport default class GiraffeStore {\n    giraffes = [\"Patrick\", \"Magnus\"];\n}\n\ndecorate(GiraffeStore, {\n    giraffes: observable\n})","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport {BrowserRouter as Router, Route, Link, withRouter} from \"react-router-dom\";\nimport Switch from \"react-router-dom/es/Switch\";\nimport GiraffeStore from \"./stores/GiraffeStore\";\nimport {observer} from \"mobx-react\";\n\nconst giraffeStore = new GiraffeStore();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload. Test\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <div className=\"d-flex justify-content-between\">\n        <InputGroup className=\"mb-3\">\n          <FormControl\n              placeholder=\"Recipient's username\"\n              aria-label=\"Recipient's username\"\n              aria-describedby=\"basic-addon2\"\n          />\n        </InputGroup>\n        <Button className=\"mb-3\" variant=\"primary\">Primary</Button>\n        </div>\n        <p>Windows 120Hz</p>\n        <Switch>\n          <Route path={\"/about/:text\"} component={About}/>\n          <Route exact path ={\"/\"} render={ () => <h1>Startside Stress</h1> } />\n          <Route render={()=><h1>404</h1>} />\n        </Switch>\n\n          <p>\n              Nedenstående er giraffer! wgwg\n          </p>\n        <ul>\n          {giraffeStore.giraffes.map((giraffeName, key) =>\n          <li key={key}>{giraffeName}</li>)}\n        </ul>\n        <Button variant=\"primary\" onClick={()=>giraffeStore.giraffes.push(\"Rasmus\")}>Tilføj giraf</Button>\n      </header>\n    </div>\n  );\n}\nexport default observer(App);\nconst About = withRouter(({history,match})=>{\n  console.log(history);\n  console.log(match);\n  return <div><h1>About {match.params.text}</h1>\n    <Button onClick={()=>history.push(\"/\")}>Go to front</Button>\n  </div>\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(<HashRouter> <App /> </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}