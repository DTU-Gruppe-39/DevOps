{"version":3,"sources":["logo.svg","stores/GiraffeStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","STATES","GiraffeStore","props","giraffes","storeState","fetchGiraffes","a","fetch","res","json","console","log","alert","this","decorate","observable","giraffeStore","observer","className","src","logo","alt","href","target","rel","placeholder","aria-label","aria-describedby","variant","path","component","About","exact","render","map","giraffeName","key","onClick","push","withRouter","history","match","params","text","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,mSCErCC,EAAiB,OAAjBA,EAAgC,OAAhCA,EAA4C,OAE7BC,EAIjB,WAAYC,GAAQ,IAAD,gCAHnBC,SAAW,CAAC,oBAGO,KAFnBC,WAAaJ,EAEM,KAalBK,cAbkB,sBAaF,8BAAAC,EAAA,+EAESC,MAAgB,iBAFzB,cAEHC,EAFG,gBAGUA,EAAIC,OAHd,cAGHA,EAHG,OAIT,EAAKN,SAAWM,EAChB,EAAKL,WAAaJ,EALT,kBAMFS,GANE,kCAST,EAAKL,WAAaJ,EAClBU,QAAQC,IAAR,MACAC,MAAM,aAXG,0DAZbC,KAAKR,iBA8BbS,YAASb,EAAc,CACnBE,SAAUY,M,YC7BRC,EAAe,IAAIf,EA+CVgB,mBA7Cf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,6BAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,yBAAKN,UAAU,kCACf,kBAAC,IAAD,CAAYA,UAAU,QACpB,kBAAC,IAAD,CACIO,YAAY,uBACZC,aAAW,uBACXC,mBAAiB,kBAGvB,kBAAC,IAAD,CAAQT,UAAU,OAAOU,QAAQ,WAAjC,YAEA,4CACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM,eAAgBC,UAAWC,IACxC,kBAAC,IAAD,CAAOC,OAAK,EAACH,KAAO,IAAKI,OAAS,kBAAM,mDACxC,kBAAC,IAAD,CAAOA,OAAQ,kBAAI,uCAGnB,gEAGF,4BACGjB,EAAab,SAAS+B,KAAI,SAACC,EAAaC,GAAd,OAC3B,wBAAIA,IAAKA,GAAMD,OAEjB,kBAAC,IAAD,CAAQP,QAAQ,UAAUS,QAAS,kBAAIrB,EAAab,SAASmC,KAAK,YAAlE,wBAMFP,EAAQQ,aAAW,YAAoB,IAAlBC,EAAiB,EAAjBA,QAAQC,EAAS,EAATA,MAGjC,OAFA/B,QAAQC,IAAI6B,GACZ9B,QAAQC,IAAI8B,GACL,6BAAK,qCAAWA,EAAMC,OAAOC,MAClC,kBAAC,IAAD,CAAQN,QAAS,kBAAIG,EAAQF,KAAK,OAAlC,mBCnDgBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASN,MACvB,2D,YCVNO,IAASf,OAAO,kBAAC,IAAD,SAAa,kBAAC,EAAD,MAAb,KAAoCgB,SAASC,eAAe,SDyHtE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7e47a7fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import {decorate, observable} from \"mobx\";\r\nconst baseUrl = process.env.NODE_ENV === 'development' ?  \"http://localhost:8080/\":\"\"; //Check if dev environment\r\nconst STATES = {FAILED:\"fail\",LOADING:\"load\",DONE:\"done\" }\r\n\r\nexport default class GiraffeStore {\r\n    giraffes = [\"Loading giraffes\"];\r\n    storeState = STATES.LOADING;\r\n    //giraffes = [\"Patrick\", \"magnus\"];\r\n    constructor(props) {\r\n        this.fetchGiraffes();\r\n    }\r\n\r\n    // fetchGiraffes (){\r\n    //     fetch(baseUrl + \"rest/giraffes\").then(\r\n    //         (response)=> response.json().then(\r\n    //             (json)=> this.giraffes=json\r\n    //         )\r\n    //     )\r\n    // }\r\n\r\n\r\n     fetchGiraffes = async ()=>{\r\n        try{\r\n            const res = await fetch(baseUrl + \"rest/giraffes\");\r\n            const json = await res.json();\r\n            this.giraffes = json;\r\n            this.storeState = STATES.DONE;\r\n            return json;\r\n        }\r\n        catch (e) {\r\n            this.storeState = STATES.FAILED;\r\n            console.log(e);\r\n            alert(\"FAIL\" + e);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\ndecorate(GiraffeStore, {\r\n    giraffes: observable\r\n})","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {BrowserRouter as Router, Route, Link, withRouter, Switch} from \"react-router-dom\";\r\nimport GiraffeStore from \"./stores/GiraffeStore\";\r\nimport {observer} from \"mobx-react\";\r\n\r\nconst giraffeStore = new GiraffeStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload. Test\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <div className=\"d-flex justify-content-between\">\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n              placeholder=\"Recipient's username\"\r\n              aria-label=\"Recipient's username\"\r\n              aria-describedby=\"basic-addon2\"\r\n          />\r\n        </InputGroup>\r\n        <Button className=\"mb-3\" variant=\"primary\">Primary</Button>\r\n        </div>\r\n        <p>Windows 120Hz</p>\r\n        <Switch>\r\n          <Route path={\"/about/:text\"} component={About}/>\r\n          <Route exact path ={\"/\"} render={ () => <h1>Startside Stress</h1> } />\r\n          <Route render={()=><h1>404</h1>} />\r\n        </Switch>\r\n\r\n          <p>\r\n              Nedenstående er giraffer! wgwg\r\n          </p>\r\n        <ul>\r\n          {giraffeStore.giraffes.map((giraffeName, key) =>\r\n          <li key={key}>{giraffeName}</li>)}\r\n        </ul>\r\n        <Button variant=\"primary\" onClick={()=>giraffeStore.giraffes.push(\"Rasmus\")}>Tilføj giraf</Button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\nexport default observer(App);\r\nconst About = withRouter(({history,match})=>{\r\n  console.log(history);\r\n  console.log(match);\r\n  return <div><h1>About {match.params.text}</h1>\r\n    <Button onClick={()=>history.push(\"/\")}>Go to front</Button>\r\n  </div>\r\n});\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(<HashRouter> <App /> </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}